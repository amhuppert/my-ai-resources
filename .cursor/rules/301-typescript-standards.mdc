---
description: Use ALWAYS when writing TypeScript code to ensure consistent and type-safe handling of type issues
globs: src/**/*.{ts,tsx}
alwaysApply: true
---
# TypeScript Standards

## Context
- Applied to all TypeScript and TSX files
- Critical for maintaining code quality and type safety
- Enforces proper handling of type issues

## Requirements
- NEVER use `@ts-ignore` comments or `@ts-expect-error` to bypass TypeScript errors, unless explicitly directed to do so.
- Always attempt to fix type errors properly
- If you are unable to fix the type error, and it is not clear how to do so, stop and ask for help.

## Examples

<example type="invalid">
```typescript
// @ts-ignore - Not sure why this errors
function processData(data: any) {
  return data.map(item => item.value);
}
```
This is incorrect because it:
1. Uses `@ts-ignore` to hide a legitimate type issue
2. Doesn't attempt to properly fix the type
</example>

<example type="valid">
```typescript
// Type-safe approach with proper typing
function processData<T extends { value: string }>(data: T[]) {
  return data.map(item => item.value);
}
```
This is correct because it:
1. Properly defines the expected type
2. Ensures type safety at compile time
3. Doesn't suppress legitimate errors
</example>

<danger>
Using `@ts-ignore` creates technical debt and bypasses TypeScript's main benefit - compile-time type checking. It hides issues rather than solving them, leading to potential runtime errors.
</danger>
